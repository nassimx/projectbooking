{"ast":null,"code":"var _jsxFileName = \"/Users/nassim/Desktop/projectbooking/client/src/components/hotels/HotelsList.js\",\n    _s = $RefreshSig$();\n\nimport { Button, Card, CardActions, CardContent, Grid, Typography } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport AddHotel from './addhotel';\nimport HotelCard from './HotelCard';\nimport './style.css';\nimport { deleteHotel, sellerHotels } from '../../redux/actions/hotel';\nimport { useSelector } from 'react-redux';\nimport HomeOutlinedIcon from '@material-ui/icons/HomeOutlined';\nimport { createConnectAccount } from '../actions/stripe';\nimport { toast } from 'react-toastify';\n\nconst HotelsList = ({\n  params\n}) => {\n  _s();\n\n  //\n  // @ts-ignore\n  const {\n    auth\n  } = useSelector(state => ({ ...state\n  })); //all Hotels\n\n  const [hotels, setHotels] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const handleClick = async () => {\n    setLoading(true);\n\n    try {\n      let res = await createConnectAccount(auth.token);\n      console.log(res); // get login link\n\n      window.location.href = res.data;\n    } catch (err) {\n      console.log(err);\n      toast.error('Stripe connect failed, Try again');\n      setLoading(false);\n    }\n  }; //\n\n\n  useEffect(() => {\n    loadSellersHotels();\n  }, []);\n\n  const loadSellersHotels = async () => {\n    let {\n      data\n    } = await sellerHotels(auth.token);\n    setHotels(data);\n  };\n\n  const handleHotelDelete = async hotelId => {\n    if (!window.confirm('Are you sure?')) return;\n    deleteHotel(auth.token, hotelId).then(res => {\n      toast.success('Hotel Deleted');\n      loadSellersHotels();\n    });\n  };\n\n  const [openadd, setOpenadd] = React.useState(false);\n\n  const handleBtnAddHotel = () => {\n    setOpenadd(true);\n  };\n\n  const handleCloseBtnAdd = () => {\n    setOpenadd(false);\n  };\n\n  const [openedit, setOpenedit] = React.useState(false);\n\n  const handleClickOpenEdit = () => {\n    setOpenedit(true);\n  };\n\n  const handleCloseEdit = () => {\n    setOpenedit(false);\n  };\n\n  const connected = () => /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    onClick: handleBtnAddHotel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, \"Add New Hotel\"), /*#__PURE__*/React.createElement(AddHotel, {\n    openadd: openadd,\n    handleCloseBtnAdd: handleCloseBtnAdd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }))); // @ts-ignore\n\n\n  const notconnected = () => /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(HomeOutlinedIcon, {\n    color: \"primary\",\n    style: {\n      fontSize: 50\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    component: \"h2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }\n  }, \"Setup payouts to post hotels rooms\"), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  }, \"Connect with stripe to transfer earnings to your bank account\"), /*#__PURE__*/React.createElement(CardActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: handleClick,\n    variant: \"contained\",\n    color: \"primary\",\n    size: \"medium\",\n    disabled: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, loading ? 'Processing...' : 'Setup Payouts')), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body2\",\n    component: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  }, \"You'll be redirected to Stripe to complete the onboarding process.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  })))));\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, auth && auth.user && auth.user.stripe_seller && auth.user.stripe_seller.charges_enabled && auth.user.stripe_seller.login_links ? connected() : notconnected(), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }\n  }, hotels.map(h =>\n  /*#__PURE__*/\n  // @ts-ignore\n  React.createElement(HotelCard, {\n    h: h,\n    key: h._id,\n    handleHotelDelete: handleHotelDelete,\n    handleClickOpenEdit: handleClickOpenEdit,\n    handleCloseEdit: handleCloseEdit,\n    openedit: openedit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 11\n    }\n  }))));\n};\n\n_s(HotelsList, \"1lIafLwKvIw38YBNgP+1TGuUpTo=\", false, function () {\n  return [useSelector];\n});\n\n_c = HotelsList;\nexport default HotelsList;\n\nvar _c;\n\n$RefreshReg$(_c, \"HotelsList\");","map":{"version":3,"sources":["/Users/nassim/Desktop/projectbooking/client/src/components/hotels/HotelsList.js"],"names":["Button","Card","CardActions","CardContent","Grid","Typography","React","useEffect","useState","AddHotel","HotelCard","deleteHotel","sellerHotels","useSelector","HomeOutlinedIcon","createConnectAccount","toast","HotelsList","params","auth","state","hotels","setHotels","loading","setLoading","handleClick","res","token","console","log","window","location","href","data","err","error","loadSellersHotels","handleHotelDelete","hotelId","confirm","then","success","openadd","setOpenadd","handleBtnAddHotel","handleCloseBtnAdd","openedit","setOpenedit","handleClickOpenEdit","handleCloseEdit","connected","notconnected","fontSize","user","stripe_seller","charges_enabled","login_links","map","h","_id"],"mappings":"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","sourcesContent":["import {\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  Grid,\n  Typography,\n} from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport AddHotel from './addhotel';\nimport HotelCard from './HotelCard';\nimport './style.css';\nimport { deleteHotel, sellerHotels } from '../../redux/actions/hotel';\nimport { useSelector } from 'react-redux';\nimport HomeOutlinedIcon from '@material-ui/icons/HomeOutlined';\nimport { createConnectAccount } from '../actions/stripe';\nimport { toast } from 'react-toastify';\n\nconst HotelsList = ({ params }) => {\n  //\n\n  // @ts-ignore\n  const { auth } = useSelector((state) => ({ ...state }));\n  //all Hotels\n  const [hotels, setHotels] = useState([]);\n\n  const [loading, setLoading] = useState(false);\n\n  const handleClick = async () => {\n    setLoading(true);\n    try {\n      let res = await createConnectAccount(auth.token);\n      console.log(res); // get login link\n      window.location.href = res.data;\n    } catch (err) {\n      console.log(err);\n      toast.error('Stripe connect failed, Try again');\n      setLoading(false);\n    }\n  };\n\n  //\n  useEffect(() => {\n    loadSellersHotels();\n  }, []);\n\n  const loadSellersHotels = async () => {\n    let { data } = await sellerHotels(auth.token);\n    setHotels(data);\n  };\n\n  const handleHotelDelete = async (hotelId) => {\n    if (!window.confirm('Are you sure?')) return;\n    deleteHotel(auth.token, hotelId).then((res) => {\n      toast.success('Hotel Deleted');\n      loadSellersHotels();\n    });\n  };\n  const [openadd, setOpenadd] = React.useState(false);\n\n  const handleBtnAddHotel = () => {\n    setOpenadd(true);\n  };\n\n  const handleCloseBtnAdd = () => {\n    setOpenadd(false);\n  };\n\n  const [openedit, setOpenedit] = React.useState(false);\n\n  const handleClickOpenEdit = () => {\n    setOpenedit(true);\n  };\n\n  const handleCloseEdit = () => {\n    setOpenedit(false);\n  };\n\n  const connected = () => (\n    <div>\n      <Grid container justifyContent=\"center\">\n        <Button variant=\"contained\" onClick={handleBtnAddHotel}>\n          Add New Hotel\n        </Button>\n        <AddHotel openadd={openadd} handleCloseBtnAdd={handleCloseBtnAdd} />\n      </Grid>\n      {/* {JSON.stringify(hotels)} */}\n    </div>\n  );\n\n  // @ts-ignore\n  const notconnected = () => (\n    <Grid container justifyContent=\"center\">\n      {/* <Button variant=\"contained\" disabled>\n        Disabled\n      </Button> */}\n      {/* <br /> */}\n      <Card>\n        <CardContent>\n          <HomeOutlinedIcon color=\"primary\" style={{ fontSize: 50 }} />\n          <Typography variant=\"h6\" component=\"h2\">\n            Setup payouts to post hotels rooms\n          </Typography>\n          <Typography variant=\"h5\">\n            Connect with stripe to transfer earnings to your bank account\n          </Typography>\n\n          <CardActions>\n            <Button\n              onClick={handleClick}\n              variant=\"contained\"\n              color=\"primary\"\n              size=\"medium\"\n              disabled={loading}\n            >\n              {loading ? 'Processing...' : 'Setup Payouts'}\n            </Button>\n          </CardActions>\n          <Typography variant=\"body2\" component=\"p\">\n            You'll be redirected to Stripe to complete the onboarding process.\n            <br />\n          </Typography>\n        </CardContent>\n      </Card>\n    </Grid>\n  );\n\n  return (\n    <>\n      {/* <pre>{JSON.stringify(auth,null ,4)}</pre> */}\n      {auth &&\n      auth.user &&\n      auth.user.stripe_seller &&\n      auth.user.stripe_seller.charges_enabled &&\n      auth.user.stripe_seller.login_links\n        ? connected()\n        : notconnected()}\n      <br />\n      <Grid container justifyContent=\"center\">\n        {/* <pre>{JSON.stringify(hotels, null, 4)}</pre> */}\n        {hotels.map((h) => (\n          // @ts-ignore\n          <HotelCard\n            h={h}\n            key={h._id}\n            handleHotelDelete={handleHotelDelete}\n            handleClickOpenEdit={handleClickOpenEdit}\n            handleCloseEdit={handleCloseEdit}\n            openedit={openedit}\n          />\n        ))}\n      </Grid>\n    </>\n  );\n};\n\nexport default HotelsList;\n"]},"metadata":{},"sourceType":"module"}