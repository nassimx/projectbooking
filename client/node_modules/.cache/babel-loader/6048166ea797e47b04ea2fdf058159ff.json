{"ast":null,"code":"var _jsxFileName = \"/Users/nassim/Desktop/projectbooking/client/src/components/User/Stripe/StripeCallback.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getAccountStatus } from '../../actions/stripe';\nimport { updateUserInLocalStorage } from '../../actions/auth';\nimport Box from '@material-ui/core/Box'; //\n\nconst StripeCallback = ({\n  history\n}) => {\n  _s();\n\n  const {\n    auth\n  } = useSelector(state => ({ ...state\n  }));\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (auth && auth.token) accountStatus(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [auth]);\n\n  const accountStatus = async () => {\n    try {\n      const res = await getAccountStatus(auth.token); // console.log('USER ACCOUNT STATUS ON STRIPE CALLBACK', res);\n      //update User In Local Storage\n\n      updateUserInLocalStorage(res.data, () => {\n        // update user in redux\n        dispatch({\n          type: 'LOGGED_IN_USER',\n          payload: res.data\n        });\n      }); // redirect user to dashboard\n\n      window.location.href = '/dashboard';\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Box, {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    minHeight: \"50vh\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CircularProgress, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(StripeCallback, \"DVrTCWdgDiqam44Ocqm3V+hCEiM=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = StripeCallback;\nexport default StripeCallback;\n\nvar _c;\n\n$RefreshReg$(_c, \"StripeCallback\");","map":{"version":3,"sources":["/Users/nassim/Desktop/projectbooking/client/src/components/User/Stripe/StripeCallback.js"],"names":["useEffect","CircularProgress","useSelector","useDispatch","getAccountStatus","updateUserInLocalStorage","Box","StripeCallback","history","auth","state","dispatch","token","accountStatus","res","data","type","payload","window","location","href","err","console","log"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AACA,SAASC,wBAAT,QAAyC,oBAAzC;AACA,OAAOC,GAAP,MAAgB,uBAAhB,C,CAEA;;AAEA,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AAAA;;AACtC,QAAM;AAAEC,IAAAA;AAAF,MAAWP,WAAW,CAAEQ,KAAD,KAAY,EAAE,GAAGA;AAAL,GAAZ,CAAD,CAA5B;AACA,QAAMC,QAAQ,GAAGR,WAAW,EAA5B;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,IAAI,IAAIA,IAAI,CAACG,KAAjB,EAAwBC,aAAa,GADvB,CAEd;AACD,GAHQ,EAGN,CAACJ,IAAD,CAHM,CAAT;;AAKA,QAAMI,aAAa,GAAG,YAAY;AAChC,QAAI;AACF,YAAMC,GAAG,GAAG,MAAMV,gBAAgB,CAACK,IAAI,CAACG,KAAN,CAAlC,CADE,CAEF;AACA;;AACAP,MAAAA,wBAAwB,CAACS,GAAG,CAACC,IAAL,EAAW,MAAM;AACvC;AACAJ,QAAAA,QAAQ,CAAC;AAAEK,UAAAA,IAAI,EAAE,gBAAR;AAA0BC,UAAAA,OAAO,EAAEH,GAAG,CAACC;AAAvC,SAAD,CAAR;AACD,OAHuB,CAAxB,CAJE,CAQF;;AACAG,MAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,YAAvB;AACD,KAVD,CAUE,OAAOC,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF,GAdD;;AAgBA,sBACE,oBAAC,GAAD;AACE,IAAA,OAAO,EAAC,MADV;AAEE,IAAA,cAAc,EAAC,QAFjB;AAGE,IAAA,UAAU,EAAC,QAHb;AAIE,IAAA,SAAS,EAAC,MAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAME,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CADF;AAUD,CAnCD;;GAAMd,c;UACaL,W,EACAC,W;;;KAFbI,c;AAqCN,eAAeA,cAAf","sourcesContent":["import { useEffect } from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getAccountStatus } from '../../actions/stripe';\nimport { updateUserInLocalStorage } from '../../actions/auth';\nimport Box from '@material-ui/core/Box';\n\n//\n\nconst StripeCallback = ({ history }) => {\n  const { auth } = useSelector((state) => ({ ...state }));\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (auth && auth.token) accountStatus();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [auth]);\n\n  const accountStatus = async () => {\n    try {\n      const res = await getAccountStatus(auth.token);\n      // console.log('USER ACCOUNT STATUS ON STRIPE CALLBACK', res);\n      //update User In Local Storage\n      updateUserInLocalStorage(res.data, () => {\n        // update user in redux\n        dispatch({ type: 'LOGGED_IN_USER', payload: res.data });\n      });\n      // redirect user to dashboard\n      window.location.href = '/dashboard';\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return (\n    <Box\n      display=\"flex\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      minHeight=\"50vh\"\n    >\n      <CircularProgress />\n    </Box>\n  );\n};\n\nexport default StripeCallback;\n"]},"metadata":{},"sourceType":"module"}